/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sample;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;


public class DocumentParser {

    //This variable will hold all terms of each document in an array.
    private List<ArrayList<String>> termsDocsArray = new ArrayList<ArrayList<String>>();
    private List<String> allTerms = new ArrayList<String>(); //to hold all terms
    private List<ArrayList<Double>> tfidfDocsVector = new ArrayList<ArrayList<Double>>();
    public List<String> fileNames = new ArrayList<String>();
    public Integer numpb=20;


    public void parseFiles(String filePath) throws FileNotFoundException, IOException {
        File[] allfiles = new File(filePath).listFiles();



        int i=0,m=0,h=0;
        for (File f : allfiles) {
            ArrayList<String> collect= new ArrayList<String>();
            fileNames.add(f.getName());
            if (f.getName().endsWith(".mail")) {
                BufferedReader in = null;
                String str=new String();
                termsDocsArray.add(collect);
                in = new BufferedReader(new FileReader(f));
                StringBuilder sb = new StringBuilder();
                String s = null;
                while ((s = in.readLine()) != null) {
                    sb.append(s);
                    s.trim();
                }

                StringTokenizer tokenizer = new StringTokenizer(sb.toString(), ",");
                while (tokenizer.hasMoreTokens()) {
                    str = tokenizer.nextToken();
                    System.out.println(str);
                    if (!allTerms.contains(str)) {  //duplicated engellendi
                        allTerms.add(str);
                        //System.out.print(allTerms.get(i) + " ");
                        ++i;
                    }
                    //collect.add(str);
                    termsDocsArray.get(h).add(str);
                }
                System.out.println("go");
                collect.trimToSize();
                collect=null;
                collect = new ArrayList<>();
                ++h;
                System.gc();
            }
        }



    }

    public void tfIdfCalculator() throws FileNotFoundException, UnsupportedEncodingException {
        int numm=0;
        double tf; //term frequency
        PrintWriter writer = new PrintWriter("test.csv", "UTF-8");
        ArrayList<Double> termsCount = new ArrayList<Double>();
        ArrayList<Double> tfVect = new ArrayList<Double>();
        ArrayList<Double> idfVect = new ArrayList<Double>();
        ArrayList<Double> buf = new ArrayList<Double>();
        ArrayList<ArrayList<Double>> tfidfSon= new ArrayList<ArrayList<Double>>();
        ArrayList<ArrayList<Double>> tfVects= new ArrayList<ArrayList<Double>>();
        ArrayList<Integer> num = new ArrayList<Integer>();
        int i=0;
        double max=0.0;
        for (ArrayList<String> docTermsArray : termsDocsArray) {

            //System.out.print("\nCount: "+docTermsArray.size()+" ");
            //System.out.print(fileNames.get(i)+" ");
            for (String terms : allTerms) {

                tf = new TfIdf().tfCalculator(docTermsArray, terms); // terim kac kere geciyor
                termsCount.add(tf);

            }
           // matris.add(termsCount);
            for (int j = 0; j <termsCount.size() ; j++) {

                if(max<termsCount.get(j)){
                    max=termsCount.get(j);
                }
            }
            for (int j = 0; j <termsCount.size() ; j++) {
                if (termsCount.get(j)==0.0){
                    //System.out.print("0.0 ");
                    tfVect.add(0.0);

                }else{
                    tfVect.add(termsCount.get(j)/docTermsArray.size());
                   // System.out.printf("%.2f",termsCount.get(j)/docTermsArray.size());
                   // System.out.print(" ");

                }


            }
          //  System.out.println("\n");
            tfidfDocsVector.add(termsCount);  //storing document vectors;
            tfVects.add(tfVect);
            termsCount = new ArrayList<>();
            tfVect =new ArrayList<>();
            ++i;
        }



            if (tfidfDocsVector.get(0).size()==0){
                System.out.println("Scanned folder is empty! Choose an other folder.");
                return;

            }


           for (int k = 0; k <tfidfDocsVector.get(0).size() ; k++) {
            for (int j = 0; j <tfidfDocsVector.size() ; j++) {
                if (tfidfDocsVector.get(j).get(k)!=0.0){
                    ++numm; //terimi iceren belge sayisi
                }
            }
            num.add(numm);
            idfVect.add(1.0+Math.log(tfidfDocsVector.size()/numm));  // her bir terim icin idf degeri
            //System.out.print(numm+"  ");
            //System.out.print(idfVect.get(k)+"  ");
                numm=0;
        }


        for (int j = 0; j <tfidfDocsVector.size() ; j++) {
            tfidfSon.add(buf);
            for (int k = 0; k <tfidfDocsVector.get(j).size() ; k++) {
                tfidfSon.get(j).add(tfVects.get(j).get(k) * idfVect.get(k));
                System.out.println("tf*idf"+ " "+ tfVects.get(j).get(k)+"*"+idfVect.get(k));
            }
            buf= new ArrayList<Double>();
        }
        System.out.print("\t\t\t\t\t\t\t\t\t\t\t");
        for (int j = 0; j <allTerms.size() ; j++) {
            System.out.print(allTerms.get(j)+",");
            /*writer.print(allTerms.get(j));
            if (j!=allTerms.size()-1)
                writer.print(",");
            else
                writer.print(",class");*/
        }
        writer.print("FLAG_S,ASSIGN,CONTROL_C,CONTROL,JUMP_S,STACK,JUMP_C,CALL_C,LIBCALL,TEST,FLAG,STACK_C,CALL,JUMP,HALT,LOCK,ASSIGN_C,UNKNOWN,NOTDEFINED,TEST_C,LIBCALL_C,class");
        System.out.println("");
        writer.println("");

        int flag=0;

        //find selected attributes index
        for (int k = 0; k <tfidfSon.size() ; k++) {
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("FLAG_S")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("ASSIGN")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }

            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("CONTROL_C")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("CONTROL")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("JUMP_S")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("STACK")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("JUMP_C")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("CALL_C")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("LIBCALL")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("TEST")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("FLAG")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("STACK_C")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("CALL")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("JUMP")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("HALT")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("LOCK")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("ASSIGN_C")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("UNKNOWN")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("NOTDEFINED")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("TEST_C")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));
                    writer.print(",");
                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");
                writer.print(",");
            }
            flag=0;
            for (int j = 0; j < allTerms.size(); j++) {
                if (allTerms.get(j).equals("LIBCALL_C")) {
                    writer.printf("%.3f", tfidfSon.get(k).get(j));

                    ++flag;
                }


            }//END FOR
            if (flag==0){
                writer.print("0.00");

            }
            flag=0;
            if(k<4){
                writer.print(",trojan");
            }else if(k==4){
                writer.print(",win");
            }else if(k==5 ){

                writer.print(",trojan");
            }
            else
            {
                writer.print(",win");
            }
            writer.println("");
        }


      for (int j = 0; j <tfidfSon.size() ; j++) {
            for (int k = 0; k <tfidfDocsVector.get(j).size() ; k++) {

                System.out.printf("%.3f",tfidfSon.get(j).get(k));
                System.out.print(",");
               /* writer.printf("%.3f",tfidfSon.get(j).get(k));
                writer.print(",");*/
            }

            if(j>1){
                System.out.print("trojan");
                System.out.println("");
                /*writer.print("trojan");
                writer.println("");*/

            }else
            {
                System.out.print("win");
                System.out.println("");
               /* writer.print("win");
                writer.println("");*/
            }

        }

        writer.close();

    }


}
