package sample;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import weka.attributeSelection.AttributeSelection;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.Ranker;
import weka.classifiers.Evaluation;
import weka.classifiers.lazy.KStar;
import weka.core.Instances;
import weka.classifiers.Classifier;
import weka.classifiers.trees.RandomForest;
import weka.core.Instances;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Standardize;

public class WekaProgress {
    public int winNum=0;
    public int malwareNum=0;
    String currentDirectory=System.getProperty("user.dir");;
    String str=new String();
    List<String> fileNames=new ArrayList<String>();
    List<String> store=new ArrayList<String>();

    public WekaProgress(List<String> fileNames) throws Exception {
        Classifier kstar = new RandomForest();
        Instances train = new Instances(new BufferedReader(new FileReader(currentDirectory+"/arff/trainSon.arff")));
        int lastIndex = train.numAttributes() - 1;

        train.setClassIndex(lastIndex);

        Instances test = new Instances(new BufferedReader(new FileReader(currentDirectory+"/arff/test.arff")));
        test.setClassIndex(lastIndex);
        kstar.buildClassifier(train);
        System.out.println(test.numInstances());
        Standardize filter = new Standardize();
        filter.setInputFormat(train);  // initializing the filter once with training set
        Instances newTrain = Filter.useFilter(train, filter);  // configures the Filter based on train instances and returns filtered instances
        Instances newTest = Filter.useFilter(test, filter);    // create new test set

        AttributeSelection attsel = new AttributeSelection();
        InfoGainAttributeEval eval = new InfoGainAttributeEval();
        Ranker search = new Ranker();
        search.setThreshold(-1.7976931348623157E308);
        search.setNumToSelect(5);
        search.setGenerateRanking(true);
        attsel.setEvaluator(eval);
        attsel.setSearch(search);
        attsel.SelectAttributes(train);


        for(int i=0; i<newTest.numInstances(); i++) {
            double index = 0;
            try {
                index = kstar.classifyInstance(newTest.instance(i));
                System.out.println(index);
            } catch (Exception e) {
                e.printStackTrace();
            }
            String className = newTrain.attribute(lastIndex).value((int)index);
            System.out.println(className);
            if (className.equals("win")){
                ++winNum;
            }else if (className.equals("trojan")){
                store.add(fileNames.get(i));
                ++malwareNum;

            }else{

            }
        }
        Evaluation eval2 = new Evaluation(newTrain);
        eval2.evaluateModel(kstar, newTest);
        System.out.println(eval2.toSummaryString("\nResults\n======\n", false));
        str=eval2.toSummaryString("\nResults\n======\n", false);



    }
}
