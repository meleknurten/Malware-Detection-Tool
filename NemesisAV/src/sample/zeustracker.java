package sample;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * Created by MNY on 17.10.2017.
 */
public class zeustracker {
    private String urlPath;
    private String links;
    public zeustracker() {
        urlPath = "https://zeustracker.abuse.ch/rss.php";
    }
    public String getLinks() throws IOException {
        URL url = new URL(urlPath);
        int count=0;
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        final String USER_AGENT =
                "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";
        connection.setRequestMethod("GET");
        connection.setRequestProperty("User-Agent", USER_AGENT);

        int responseCode = connection.getResponseCode();
        System.out.println("ResponseCode : " + responseCode);

        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();
        response.append(in.readLine());
        response.append("\n");
        while ((inputLine = in.readLine()) != null) {
            //if (inputLine.contains("http") ) {
                response.append(inputLine);
                response.append("\n");
           // }

        }
        in.close();
        connection.disconnect();

        links = response.toString();

        return links;
    }
    public void getFile() throws IOException, SAXException, ParserConfigurationException {
        String zeusDownLinks;
        StringBuffer zeusLinks = new StringBuffer();
        PrintWriter writer = new PrintWriter("MALCODE.txt", "UTF-8");
        writer.print(links);

        writer.close();
        File fXmlFile = new File("MALCODE.txt");

        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(fXmlFile);

        doc.getDocumentElement().normalize();

        NodeList nList = doc.getElementsByTagName("item");

        for (int temp = 0; temp < nList.getLength(); temp++) {

            Node nNode = nList.item(temp);

            if (nNode.getNodeType() == Node.ELEMENT_NODE) {

                Element eElement = (Element) nNode;
               // System.out.println("title : " + eElement.getElementsByTagName("title").item(0).getTextContent());
                zeusLinks.append(eElement.getElementsByTagName("link").item(0).getTextContent());
                zeusLinks.append("\n");
                System.out.println(zeusLinks);
              //  System.out.println("link : " + eElement.getElementsByTagName("link").item(0).getTextContent());
               // System.out.println("description : " + eElement.getElementsByTagName("description").item(0).getTextContent());
                //System.out.println("guid : " + eElement.getElementsByTagName("guid").item(0).getTextContent());
            }
        }
        zeusDownLinks= zeusLinks.toString();
        String[] downloadLinks = zeusDownLinks.split("\n");
        String dirName = "C:\\Users\\MNY\\Desktop\\Malware\\Malware\\ZeusTracker";
        File file = new File(dirName + "\\" + "lastLink.txt");
        String lastLink;

        if (file.exists() && !file.isDirectory()) {
            try (BufferedReader br = new BufferedReader(new FileReader(file.toString()))) {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                lastLink = sb.toString().replaceAll("\\r\\n", "");
            }

            for (String downloadLink : downloadLinks) {
                if (downloadLink.compareTo(lastLink) != 0) {
                    try {
                        URL url = new URL(downloadLink);
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

                        connection.setRequestMethod("GET");
                        connection.setRequestProperty("User-Agent", "Mozilla/5.0");

                        if (connection.getResponseCode() == 200) {
                            connection.disconnect();
                            Download.downloadUsingNIO(downloadLink, dirName + "\\" + downloadLink.substring(7).replace("/", "-"));

                        }
                    } catch (IOException e) {
                        System.out.println("Link Error -> " + downloadLink);
                    }
                }
                else
                    break;
            }

            PrintWriter writer1 = new PrintWriter(file.toString(), "UTF-8");
            writer.print(downloadLinks[0]);
            writer.close();

        } else {
            for (String downloadLink : downloadLinks) {

                try {
                    URL url = new URL(downloadLink);
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

                    connection.setRequestMethod("GET");
                    connection.setRequestProperty("User-Agent", "Mozilla/5.0");

                    if (connection.getResponseCode() == 200) {
                        connection.disconnect();
                        Download.downloadUsingNIO(downloadLink, dirName + "\\" + downloadLink.substring(7).replace("/", "-"));

                    }
                } catch (IOException e) {
                    System.out.println("Link Error -> " + downloadLink);
                }
            }

            PrintWriter writer1 = new PrintWriter(file.toString(), "UTF-8");
            writer.print(downloadLinks[0]);
            writer.close();
        }


    }
}
