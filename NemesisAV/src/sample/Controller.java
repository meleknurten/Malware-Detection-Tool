package sample;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.chart.*;
import javafx.scene.chart.XYChart.Series;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Modality;
import javafx.stage.Stage;
import weka.core.Instances;
import weka.core.converters.ArffSaver;
import weka.core.converters.CSVLoader;

import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ResourceBundle;


public class Controller implements Initializable{
    public Controller() throws FileNotFoundException, UnsupportedEncodingException {
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        ObservableList<PieChart.Data> pieChartdata
                = FXCollections.observableArrayList(
                new PieChart.Data("Malware",0),
                new PieChart.Data("Win",0)
        );
        piechart.setData(pieChartdata);


        barChart1.setBarGap(100);

        barChart2.setBarGap(100);
        // barChart2.setData(barChartData2);
        barChart3.setBarGap(22);
        barChart1.setData(barChartData);
        barChart2.setData(barChartData2);
        barChart3.setData(barChartData3);
       // barChart3.setData(barChartData3);
        //barChart1 = new BarChart(xAxis1, yAxis1, barChartData, 25.0d);



      //  barChart1.setData(bar);
    }
    String[] programs = {"MAIL-Frekans","Histogram", "HMM","MAIL","CFG","OPCODE","SUB.CIPHER"};
    String[] algorithms = {"RandomForest","NaiveBayes", "SVM","KNN","Kstar"};
    String[] algorAttri = {"SVM","ChiSquared", "InfoGain","Relief-F","GainRatio"};
    String[] attributes = {"CALL_C","UNKNOWN", "LIBCALL","CONTROL_C","STACK_C"};
    int percent1=0;
    int percent2=0;
    int percent3=0;
    int percent4=0;
    int percent5=0;
    int percent6=0;
    int percent7=0;
    ObservableList<BarChart.Series> barChartData = FXCollections.observableArrayList(
            new BarChart.Series("MAIL-Frekans", FXCollections.observableArrayList(
                    new BarChart.Data(programs[0], percent1)
            )),
            new BarChart.Series("Histogram", FXCollections.observableArrayList(
                    new BarChart.Data(programs[1], percent2)
            )),
            new BarChart.Series("HMM", FXCollections.observableArrayList(
                    new BarChart.Data(programs[2], percent3)
            )),
            new BarChart.Series("MAIL", FXCollections.observableArrayList(
                    new BarChart.Data(programs[3], percent4)
            )),
            new BarChart.Series("CFG", FXCollections.observableArrayList(
                    new BarChart.Data(programs[4], percent5)
            )),
            new BarChart.Series("OPCODE", FXCollections.observableArrayList(
                    new BarChart.Data(programs[5], percent6)
            )),
            new BarChart.Series("SUB.CIPHER", FXCollections.observableArrayList(
                    new BarChart.Data(programs[6], percent7)
            ))
    );
    ObservableList<BarChart.Series> barChartData2 = FXCollections.observableArrayList(
            new BarChart.Series("RandomForest", FXCollections.observableArrayList(
                    new BarChart.Data(algorithms[0], percent7)
            )),
            new BarChart.Series("NaiveBayes", FXCollections.observableArrayList(
                    new BarChart.Data(algorithms[1], percent7)
            )),
            new BarChart.Series("SVM", FXCollections.observableArrayList(
                    new BarChart.Data(algorithms[2], percent7)
            )),
            new BarChart.Series("KNN", FXCollections.observableArrayList(
                    new BarChart.Data(algorithms[3], percent7)
            )),
            new BarChart.Series("KStar", FXCollections.observableArrayList(
                    new BarChart.Data(algorithms[4], percent7)
            ))
    );

    ObservableList<BarChart.Series> barChartData3 = FXCollections.observableArrayList(
            new BarChart.Series("SVM", FXCollections.observableArrayList(
                    new BarChart.Data(algorAttri[0], percent7)
            )),
            new BarChart.Series("ChiSquared", FXCollections.observableArrayList(
                    new BarChart.Data(algorAttri[1], percent7)
            )),
            new BarChart.Series("InfoGain", FXCollections.observableArrayList(
                    new BarChart.Data(algorAttri[2], percent7)
            )),
            new BarChart.Series("Relief-F", FXCollections.observableArrayList(
                    new BarChart.Data(algorAttri[3], percent7)
            )),
            new BarChart.Series("GainRatio", FXCollections.observableArrayList(
                    new BarChart.Data(algorAttri[4], percent7)
            ))
    );

    PrintWriter writer = new PrintWriter(new FileOutputStream(new File("folderPath.txt"),true));
    ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();
    @FXML
    ProgressBar pb;

    @FXML
    Button sb;

    @FXML
    PieChart piechart;

    @FXML
    Text textC;

    @FXML
    TextField fieldText;

    @FXML
    TextArea ResultText;

    @FXML
    String path=null;

    @FXML
    BarChart barChart1;

    @FXML
    BarChart barChart2;

    @FXML
    BarChart barChart3;

    @FXML
    NumberAxis yAxis1;
    @FXML
    CategoryAxis xAxis1;


    @FXML
    File file; //tek dosya taranmak istenirse
    String currentDirectory = System.getProperty("user.dir");
    StringBuilder resultStr= new StringBuilder();
    int taranan=0;
    final Stage stage=new Stage();


    private Task taskCreator (final int seconds){
        return new Task() {
            @Override
            protected Object call() throws Exception {
                for (int i = 0; i <seconds ; i++) {
                    updateProgress(i+1,seconds);
                }
                return true;
            }
        };

    }


    @FXML
    void Close(ActionEvent event) {
        if (file!=null){
            file.delete();
            Platform.exit();
            System.exit(0);
        }else{
            Platform.exit();
            System.exit(0);
        }
    }
    @FXML
    void ButtonScan(ActionEvent event) throws Exception { //Tarama islemini baslatir.
       // Task task = taskCreator(20);
      //  pb.progressProperty().bind(task.progressProperty());

        Runtime rt = Runtime.getRuntime();
        Process pr = rt.exec("python /home/hrn/Desktop/NemesisAV/src/sample/runDroidnative.py "+path);

        BufferedReader bfr = new BufferedReader(new InputStreamReader(pr.getInputStream()));

        textC.setText("Tarama yapılıyor.");
        Thread.sleep(10000);
        DocumentParser dp = new DocumentParser();

        dp.parseFiles(path);
        dp.tfIdfCalculator(); //calculates tfidf
        Thread.sleep(4000);
      //  pb.progressProperty().unbind();
        CSVLoader loader = new CSVLoader();
        loader.setSource(new File(currentDirectory+"/test.csv"));
        Instances data = loader.getDataSet();
        // save ARFF
        ArffSaver saver = new ArffSaver();
        saver.setInstances(data);
        saver.setFile(new File(currentDirectory+"/arff/test.arff"));
        saver.setDestination(new File(currentDirectory+"/arff/test.arff"));
        saver.writeBatch();

        textC.setText("Tarama bitti.");
        WekaProgress wekaProgress = new WekaProgress(dp.fileNames);
        System.out.println();

        ObservableList<PieChart.Data> pieChartdata
                = FXCollections.observableArrayList(
                new PieChart.Data("Malware",wekaProgress.malwareNum),
                new PieChart.Data("Win",wekaProgress.winNum)
        );
        piechart.setData(pieChartdata);
        percent1=80;
        percent2=100;
        percent3=90;
        percent4=100;
        percent5=98;
        percent6=92;
        percent7=90;
        ObservableList<BarChart.Series> barChartData = FXCollections.observableArrayList(
                new BarChart.Series("MAIL-Frekans", FXCollections.observableArrayList(
                        new BarChart.Data(programs[0], percent1)
                )),
                new BarChart.Series("Histogram", FXCollections.observableArrayList(
                        new BarChart.Data(programs[1], percent2)
                )),
                new BarChart.Series("HMM", FXCollections.observableArrayList(
                        new BarChart.Data(programs[2], percent3)
                )),
                new BarChart.Series("MAIL", FXCollections.observableArrayList(
                        new BarChart.Data(programs[3], percent4)
                )),
                new BarChart.Series("CFG", FXCollections.observableArrayList(
                        new BarChart.Data(programs[4], percent5)
                )),
                new BarChart.Series("OPCODE", FXCollections.observableArrayList(
                        new BarChart.Data(programs[5], percent6)
                )),
                new BarChart.Series("SUB.CIPHER", FXCollections.observableArrayList(
                        new BarChart.Data(programs[6], percent7)
                ))
        );
        ObservableList<BarChart.Series> barChartData2 = FXCollections.observableArrayList(
                new BarChart.Series("RandomForest", FXCollections.observableArrayList(
                        new BarChart.Data(algorithms[0], 77)
                )),
                new BarChart.Series("NaiveBayes", FXCollections.observableArrayList(
                        new BarChart.Data(algorithms[1], 65)
                )),
                new BarChart.Series("SVM", FXCollections.observableArrayList(
                        new BarChart.Data(algorithms[2], 69)
                )),
                new BarChart.Series("KNN", FXCollections.observableArrayList(
                        new BarChart.Data(algorithms[3], 75)
                )),
                new BarChart.Series("KStar", FXCollections.observableArrayList(
                        new BarChart.Data(algorithms[4], 80)
                ))
        );
        ObservableList<BarChart.Series> barChartData3 = FXCollections.observableArrayList(
                new BarChart.Series("SVM", FXCollections.observableArrayList(
                        new BarChart.Data(algorAttri[0], 4)
                )),
                new BarChart.Series("ChiSquared", FXCollections.observableArrayList(
                        new BarChart.Data(algorAttri[1], 5)
                )),
                new BarChart.Series("InfoGain", FXCollections.observableArrayList(
                        new BarChart.Data(algorAttri[2], 5)
                )),
                new BarChart.Series("Relief-F", FXCollections.observableArrayList(
                        new BarChart.Data(algorAttri[3], 4)
                )),
                new BarChart.Series("GainRatio", FXCollections.observableArrayList(
                        new BarChart.Data(algorAttri[4], 9)
                ))
        );

        barChart1.setData(barChartData);
        barChart2.setData(barChartData2);
        barChart3.setData(barChartData3);
        taranan=wekaProgress.malwareNum+wekaProgress.winNum;
        resultStr.append(wekaProgress.str+"\nToplamda taranan dosya sayısı: "+taranan+"\nTespit Edilen Malware Sayısı: "+wekaProgress.malwareNum+"\nTespit Edilen Zararsız Sayısı: "+wekaProgress.winNum);
        resultStr.append("\n");
        resultStr.append("\n\nZararlı Dosya Listesi:");
        for (int i = 0; i <wekaProgress.store.size() ; i++) {
            resultStr.append("\n");
            resultStr.append(wekaProgress.store.get(i).subSequence(0,wekaProgress.store.get(i).length()-5));

        }

        ResultText.setText(resultStr.toString());
        String s=null;
        Runtime rt2 = Runtime.getRuntime();
        Process pr2 = rt2.exec("python /home/hrn/Desktop/NemesisAV/src/sample/removeFiles.py "+path);
        BufferedReader bfr2 = new BufferedReader(new InputStreamReader(pr2.getInputStream()));
        BufferedReader error = new BufferedReader(new InputStreamReader(pr2.getErrorStream()));

        while((s= error.readLine())!=null){
            System.out.println(s);

        }
    }


    @FXML
    Stage AboutNemesisAV(ActionEvent event) {

        Stage popupwindow=new Stage();
        popupwindow.initModality(Modality.APPLICATION_MODAL);
        popupwindow.setTitle("NemesisAV AntiVirus ?");
        Label label1= new Label("\n\n\n\tBu program 2017-2018 döneminde Gebze Teknik \n\tÜniversitesi Bitirme Projesi kapsamında " +
                "Melek Nurten \n\tYAVUZ trafından geliştirilmiş Makine Öğrenmesi \n\ttabanlı kötücül kod bulma programıdır.");
        VBox layout= new VBox(10);
        layout.getChildren().addAll(label1);
        layout.setAlignment(Pos.TOP_LEFT);
        Image image = new Image("gtu_logo.png");
        ImageView iv2 = new ImageView();
        iv2.setImage(image);
        iv2.setFitWidth(200);
        iv2.setFitHeight(200);
        iv2.setPreserveRatio(true);
        iv2.setSmooth(true);
        iv2.setCache(true);
        HBox box = new HBox();
        box.getChildren().add(iv2);
        layout.getChildren().add(box);

        Scene scene1= new Scene(layout, 400, 300);
        popupwindow.setScene(scene1);
        popupwindow.showAndWait();
        return  popupwindow;
    }

    @FXML
    void Options(ActionEvent event) {

    }

    @FXML
    void SaveAnalysisReport(ActionEvent event) {


    }
    @FXML
    void SaveFolderPath(ActionEvent event) throws IOException {
        File file = new File("folderPath.txt");
        FileReader fileReader = new FileReader(file);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        StringBuffer stringBuffer = new StringBuffer();
        String line;
        line = bufferedReader.readLine();
        stringBuffer.append(line);
        fileReader.close();
        path=stringBuffer.toString();
        System.out.println("Contents of file:");
        System.out.println(path);
        sb.setDisable(false);

    }

    @FXML
    void SelectFile(ActionEvent event) throws IOException {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Taranacak Dosyayı Seçiniz");
        file=fileChooser.showOpenDialog(stage);


        String path2 =currentDirectory + "/Tarama/"+file.getAbsolutePath().substring(file.getAbsolutePath().lastIndexOf("/")+1);
        File f = new File(path2);
        System.out.println(currentDirectory+"/Tarama/"+f.getName());
        path=file.getPath();
        Files.copy(Paths.get(path), new FileOutputStream(currentDirectory+"/Tarama/"+f.getName()));
        path=currentDirectory+"/Tarama";
        System.out.println("Cureent direct:"+path);

        sb.setDisable(false);

    }

    @FXML
    void FolderPath(ActionEvent event)throws IOException {
        path=fieldText.getText();
        System.out.println(path);
        writer.println(path); // eski pathi kaydet
        writer.close();
        sb.setDisable(false);

    }

}
